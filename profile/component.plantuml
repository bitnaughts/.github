@startuml


abstract class Object {
+string name
#clone()
#finalize()
#getClass()
}

class Structure {
+Dictionary<string, Component>
+FixedUpdate()
}

abstract class Component {
#Vector pos
#Vector siz
#float rot
}

interface Entry {
Main()
}

class Processor {
#Stack stack
+Main()
}

entity Stack{
+Push()
+Pop()
}

interface Memory {
Allocate()
Deallocate()
}

class Bulkhead {
#Heap heap
+Allocate()
+Deallocate()
}

entity Heap {
+New()
+Delete()
}


interface Scanner {
Scan()
}

class Radar {
#Ray ray
+Scan()
}

entity Ray {
+Cast()
+Length()
}

interface Gun {
Fire()
}

class Cannon {
#float[] barrels
+Fire()
}

entity Shell {
#float speed
+OnCollision()
}


interface Engine {
Thrust()
}

class Booster {
#float throttle
+ Fire()
+ Thrust()
}

entity Torpedo{
#float speed
+OnCollision()
}

class Thruster {
#float throttle
+Thrust()
}

interface Rotator {
Rotate()
}

class Gimbal {
#float rot
+Rotate()
}

interface Replicator {
Print()
}

class Printer {
#float speed
+Print()
}

Structure::Dictionary --o Component
Object --|> Component
Object --|> Structure
Engine --> Booster
Engine --> Thruster
Component --|> Booster
Component --|> Thruster
Component --|> Bulkhead
Memory --> Bulkhead
Bulkhead --* Heap
Rotator --> Gimbal
Component --|> Gimbal
Component --|> Processor
Entry --> Processor
Processor --* Stack
Scanner --> Radar
Component --|> Radar
Radar --* Ray
Gun --> Cannon
Gun --> Booster
Component --|> Cannon
Cannon --* Shell
Booster --* Torpedo
Replicator --> Printer
Component --|> Printer
@enduml

